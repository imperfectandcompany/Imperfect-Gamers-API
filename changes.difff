diff --git a/private/classes/class.database.php b/private/classes/class.database.php
index c6ae7dd..e7c277a 100644
--- a/private/classes/class.database.php
+++ b/private/classes/class.database.php
@@ -1,4 +1,6 @@
 <?php
+
+// TODO ALLOW SUPPORT FOR USING SAME PLACEHOLDER MULTIPLE TIMES IN THE QUERY, CURRENT WAY TO GET AROUND IS USING A UNIQUE PLACEHOLDER FOR EACH OCCURRENCE.
 class DatabaseConnector
 {
     private $dbConnection = null;
diff --git a/private/classes/class.support.php b/private/classes/class.support.php
index 34a56d0..935b636 100644
--- a/private/classes/class.support.php
+++ b/private/classes/class.support.php
@@ -231,9 +231,8 @@ class Support
             if ($updateResult) {
 
                 // log the update in a CategoryActionLog
-                $this->logCategoryAction($userId, $categoryId, self::CATEGORY_UPDATED);
-
-                return true;
+                $this->logCategoryAction($userId, $newVersionId, self::CATEGORY_UPDATED);
+                return $newVersionId; // Return the new version ID
             } else {
                 throw new Exception("Failed to update category. Ensure common data integrity points and try again.");
             }
@@ -266,15 +265,16 @@ class Support
         }
     }
 
-
-    public function createCategoryVersion($categoryId, $title)
+    public function createCategoryVersion($categoryId, $title, $isDeleted = 0)
     {
-        $versionData = json_encode(['title' => $title]);
+        // Determine if the DeletedAt timestamp should be set
+        $deletedAt = $isDeleted ? date('Y-m-d H:i:s') : null;
+    
         $table = "CategoryVersions";
-        $rows = "CategoryID, Title";
-        $values = "?, ?";
-        $params = makeFilterParams([$categoryId, $title]);
-
+        $rows = "CategoryID, Title, DeletedAt";
+        $values = "?, ?, ?";
+        $params = makeFilterParams([$categoryId, $title, $deletedAt]);
+    
         try {
             $addResult = $this->supportSiteDb->insertData($table, $rows, $values, $params);
             if ($addResult) {
@@ -286,12 +286,96 @@ class Support
             throw new PDOException('Failed to create category version: ' . $e->getMessage());
         }
     }
-
+    
     public function fetchCategoryVersions($categoryId)
     {
-        $query = "SELECT * FROM CategoryVersions WHERE CategoryID = :categoryId ORDER BY CreatedAt DESC";
-        $params = [':categoryId' => $categoryId];
-        return $this->supportSiteDb->query($query, $params);
+        // Query to get the current version ID from the Categories table
+        $currentVersionIdQuery = "SELECT 
+                VersionID 
+            FROM 
+                Categories 
+            WHERE 
+                CategoryID = :categoryId
+            LIMIT 1
+        ";
+        
+        // Execute the query to get the current version ID
+        $currentVersionIdResult = $this->supportSiteDb->query($currentVersionIdQuery, [':categoryId' => $categoryId]);
+        $currentVersionId = $currentVersionIdResult[0]['VersionID'] ?? null;
+        
+        // Query to get the current version details from the CategoryVersions table
+        $currentVersionQuery = "SELECT 
+                cv.*, 
+                (SELECT COUNT(*) 
+                 FROM Articles a 
+                 WHERE a.VersionID IN (
+                     SELECT av.VersionID 
+                     FROM ArticleVersions av 
+                     WHERE av.ArticleID = a.ArticleID 
+                     AND av.CategoryID = cv.CategoryID 
+                     AND (av.DeletedAt IS NULL)
+                 )
+                ) AS ArticleCount
+            FROM 
+                CategoryVersions cv
+            WHERE 
+                cv.VersionID = :versionId
+            LIMIT 1
+        ";
+        
+        // Query to get the historical versions excluding the current version
+        $historicalVersionsQuery = "SELECT 
+                cv.*, 
+                COUNT(DISTINCT av.ArticleID) AS ArticleCount 
+            FROM 
+                CategoryVersions cv
+            LEFT JOIN 
+                (SELECT 
+                    av.ArticleID, 
+                    av.CategoryID,
+                    av.CreatedAt,
+                    av.DeletedAt
+                 FROM 
+                    ArticleVersions av
+                 INNER JOIN 
+                    (SELECT 
+                        ArticleID, 
+                        MAX(CreatedAt) AS MaxCreatedAt
+                     FROM 
+                        ArticleVersions 
+                     WHERE 
+                        CategoryID = :categoryId1
+                     GROUP BY 
+                        ArticleID) AS LatestArticleVersions
+                 ON 
+                    av.ArticleID = LatestArticleVersions.ArticleID 
+                    AND av.CreatedAt = LatestArticleVersions.MaxCreatedAt
+                ) AS av 
+            ON 
+                cv.CategoryID = av.CategoryID 
+                AND av.CreatedAt <= cv.CreatedAt
+                AND (av.DeletedAt IS NULL OR av.DeletedAt > cv.CreatedAt)
+            WHERE 
+                cv.CategoryID = :categoryId2
+                AND cv.VersionID != :currentVersionId
+            GROUP BY 
+                cv.VersionID
+            ORDER BY 
+                cv.CreatedAt DESC
+        ";
+    
+        $params = [':categoryId1' => $categoryId, ':categoryId2' => $categoryId, ':currentVersionId' => $currentVersionId];
+        
+        // Fetch the current version details
+        $currentVersion = $this->supportSiteDb->query($currentVersionQuery, [':versionId' => $currentVersionId]);
+        
+        // Fetch the historical versions excluding the current version
+        $historicalVersions = $this->supportSiteDb->query($historicalVersionsQuery, $params);
+        
+        return [
+            'currentVersion' => $currentVersion,
+            'historicalVersions' => $historicalVersions
+        ];
     }
 
     public function updateArticle($articleId, $newCategoryId, $newTitle, $newDescription, $newDetailedDescription, $newImgSrc)
@@ -355,7 +439,7 @@ class Support
                 if (!empty($specificChanges)) {
                     $this->logArticleAction($userId, $newArticleVersionId, $specificChanges);
                 }
-                return true;
+                return $newArticleVersionId;
             } else {
                 // Log the failed content update
                 $this->logArticleAction($userId, $newArticleVersionId, self::ARTICLE_CONTENT_UPDATE_FAILED);
@@ -411,7 +495,7 @@ class Support
                 // Log the action in ArticleActionLog
                 $this->logArticleAction($userId, $newArticleVersionId, $newStatus == 1 ? [self::ARTICLE_ARCHIVED] : [self::ARTICLE_UNARCHIVED]);
 
-                return true;
+                return $newArticleVersionId;
             } else {
                 throw new Exception("Failed to archive article. Ensure data integrity and try again.");
 
@@ -468,7 +552,7 @@ class Support
                 // Log the action in ArticleActionLog
                 $this->logArticleAction($userId, $newArticleVersionId, $newStatus == 1 ? [self::ARTICLE_SET_STAFF_ONLY] : [self::ARTICLE_SET_PUBLIC]);
 
-                return true;
+                return $newArticleVersionId;
             } else {
                 throw new Exception("Failed to toggle article's staff-only status. Ensure data integrity and try again.");
             }
@@ -491,6 +575,7 @@ class Support
         $this->supportSiteDb->query($query, $params);
     }
 
+
     public function createArticleVersion(
         $articleId,
         $categoryId = null,
@@ -499,14 +584,15 @@ class Support
         $detailedDescription = null,
         $imgSrc = null,
         $staffOnly = 0, // New optional parameter for StaffOnly status
-        $archiveStatus = 0 // New optional parameter for archive status
+        $archiveStatus = 0, // New optional parameter for archive status
+        $isDeleted = 0 // New optional parameter for delete status
     ) {
         // Fetch current article data to use as defaults
         $currentArticle = $this->fetchArticleById($articleId);
         if (!$currentArticle || count($currentArticle) === 0) {
             throw new Exception('Article not found');
         }
-
+    
         // Use existing values if new ones are not provided
         $categoryId = $categoryId ?? $currentArticle[0]['CategoryID'];
         $title = $title ?? $currentArticle[0]['Title'];
@@ -514,23 +600,24 @@ class Support
         $detailedDescription = $detailedDescription ?? $currentArticle[0]['DetailedDescription'];
         $imgSrc = $imgSrc ?? $currentArticle[0]['ImgSrc'];
         $staffOnly = $staffOnly ?? $currentArticle[0]['StaffOnly'];
-        // $newVersion = $newVersion ?? ($this->getLatestArticleVersion($articleId) + 1);
-
+        $archiveStatus = $archiveStatus ?? $currentArticle[0]['Archived'];
+    
         $slug = strtolower(str_replace(' ', '-', $title));
-
+    
         // Check if the new slug or title already exists and is not itself
         $existingArticle = $this->supportSiteDb->query(
             'SELECT * FROM Articles WHERE (Slug = :slug OR Title = :title) AND ArticleID != :articleId',
             [':slug' => $slug, ':title' => $title, ':articleId' => $articleId]
         );
-
+    
         if (!empty($existingArticle)) {
             throw new Exception('This article title or slug is already taken!');
         }
-
+    
         $table = "ArticleVersions";
-        $rows = "ArticleID, CategoryID, Title, Description, DetailedDescription, Slug, ImgSrc, StaffOnly, Archived";
-        $values = "?, ?, ?, ?, ?, ?, ?, ?, ?";
+        $rows = "ArticleID, CategoryID, Title, Description, DetailedDescription, Slug, ImgSrc, StaffOnly, Archived, DeletedAt";
+        $values = "?, ?, ?, ?, ?, ?, ?, ?, ?, ?";
+        $deletedAt = $isDeleted ? date('Y-m-d H:i:s') : null; // Set DeletedAt timestamp if marked as deleted
         $params = makeFilterParams([
             $articleId,
             $categoryId,
@@ -540,9 +627,10 @@ class Support
             $slug,
             $imgSrc,
             $staffOnly,
-            $archiveStatus
+            $archiveStatus,
+            $deletedAt
         ]);
-
+    
         try {
             $addResult = $this->supportSiteDb->insertData($table, $rows, $values, $params);
             if ($addResult) {
@@ -674,22 +762,90 @@ class Support
     }
 
 
-
-
-
-    public function deleteArticle($articleId, $userId)
+    public function deleteCategory($categoryId, $userId)
     {
-        // Soft delete the article by setting DeletedAt
-        $deleteQuery = "UPDATE Articles SET DeletedAt = NOW() WHERE ArticleID = :articleId";
-        $this->supportSiteDb->query($deleteQuery, [':articleId' => $articleId]);
+        // Fetch current category data to create a new version
+        $currentCategory = $this->fetchCategoryById($categoryId);
+        if (!$currentCategory || count($currentCategory) === 0) {
+            throw new Exception('Category not found');
+        }
+    
+        // Create a new version of the category marking it as deleted
+        $newCategoryVersionId = $this->createCategoryVersion(
+            $categoryId,
+            $currentCategory[0]['Title'],
+            1 // Mark as deleted
+        );
+    
+        // Prepare parameters for the update
+        $params = makeFilterParams([$newCategoryVersionId, $categoryId]);
+    
+        try {
+            // Update the current category to reference the new deleted version and set DeletedAt
+            $updateResult = $this->supportSiteDb->updateData(
+                "Categories",
+                "VersionID = ?, DeletedAt = NOW()",
+                "CategoryID = ?",
+                $params
+            );
+    
+            if ($updateResult) {
+                // Log the action in CategoryActionLog
+                $this->logCategoryAction($userId, $newCategoryVersionId, self::CATEGORY_DELETED);
+                return true;
+            } else {
+                throw new Exception("Failed to delete category. Ensure data integrity and try again.");
+            }
+        } catch (Exception $e) {
+            throw new PDOException('Failed to delete category: ' . $e->getMessage());
+        }
+    }
+    
 
-        // Log the deletion in ArticleActionLog
-        // TODO: RESTRUCTURE BECAUSE WE DONT HAVE A VERSION ID FOR DELETION
-        $this->logArticleAction($userId, $articleId, [self::ARTICLE_DELETED]);
+public function deleteArticle($articleId, $userId)
+{
+    // Fetch current article data to create a new version
+    $currentArticle = $this->fetchArticleById($articleId);
+    if (!$currentArticle || count($currentArticle) === 0) {
+        throw new Exception('Article not found');
+    }
 
-        // Return true or false based on success
-        return true;
+    // Create a new version of the article marking it as deleted
+    $newArticleVersionId = $this->createArticleVersion(
+        $articleId,
+        $currentArticle[0]['CategoryID'],
+        $currentArticle[0]['Title'],
+        $currentArticle[0]['Description'],
+        $currentArticle[0]['DetailedDescription'],
+        $currentArticle[0]['ImgSrc'],
+        $currentArticle[0]['StaffOnly'],
+        $currentArticle[0]['Archived'],
+        1 // Mark as deleted
+    );
+
+    // Prepare parameters for the update
+    $params = makeFilterParams([$newArticleVersionId, $articleId]);
+
+    try {
+        // Update the current article to reference the new deleted version
+        $updateResult = $this->supportSiteDb->updateData(
+            "Articles",
+            "VersionID = ?, DeletedAt = NOW()",
+            "ArticleID = ?",
+            $params
+        );
+
+        if ($updateResult) {
+            // Log the action in ArticleActionLog
+            $this->logArticleAction($userId, $newArticleVersionId, self::ARTICLE_DELETED);
+            return true;
+        } else {
+            throw new Exception("Failed to delete article. Ensure data integrity and try again.");
+        }
+    } catch (Exception $e) {
+        throw new PDOException('Failed to delete article: ' . $e->getMessage());
     }
+}
 
     // public function deleteCategory($categoryID)
     // {
@@ -737,19 +893,6 @@ class Support
         $this->supportSiteDb->query($query, $params);
     }
 
-    public function deleteCategory($categoryId, $userId)
-    {
-        // Soft delete the category by setting DeletedAt
-        $deleteQuery = "UPDATE Categories SET DeletedAt = NOW() WHERE CategoryID = :categoryId";
-        $this->supportSiteDb->query($deleteQuery, [':categoryId' => $categoryId]);
-
-        // log the deletion in a CategoryActionLog
-        $this->logCategoryAction($userId, $categoryId, self::CATEGORY_DELETED);
-
-        // Return true or false based on success
-        return true;
-    }
-
     public function restoreArticle($articleId, $userId)
     {
         // Restore the article by setting DeletedAt to NULL
diff --git a/private/controllers/SupportController.php b/private/controllers/SupportController.php
index 99af28e..c2f52d8 100644
--- a/private/controllers/SupportController.php
+++ b/private/controllers/SupportController.php
@@ -190,7 +190,6 @@ class SupportController
 
         // Extract data from the request body
         $categoryTitle = $data['categoryTitle'] ?? null;
-
         $userId = $GLOBALS['user_id']; // identify the current user
 
         if ($categoryTitle === null) {
@@ -198,11 +197,10 @@ class SupportController
         }
 
         try {
+            $newVersionId = $this->supportModel->updateCategory($categoryId, $categoryTitle, $userId);
 
-            $result = $this->supportModel->updateCategory($categoryId, $categoryTitle, $userId);
-
-            if ($result) {
-                return ResponseHandler::sendResponse('success', ['message' => 'Category updated successfully'], 200);
+            if ($newVersionId) {
+                return ResponseHandler::sendResponse('success', ['message' => 'Category updated successfully', 'versionID' => $newVersionId], 200);
             } else {
                 return ResponseHandler::sendResponse('error', ['message' => 'Failed to update category'], 500);
             }
@@ -212,6 +210,7 @@ class SupportController
         }
     }
 
+
     public function updateArticle($articleId)
     {
         $data = json_decode(file_get_contents('php://input'), true);
@@ -224,9 +223,9 @@ class SupportController
         $imgSrc = $data['imgSrc'] ?? null; // Assuming 'imgSrc' is optional
 
         try {
-            $result = $this->supportModel->updateArticle($articleId, $categoryId, $title, $description, $detailedDescription, $imgSrc);
-            if ($result) {
-                return ResponseHandler::sendResponse('success', ['message' => 'Article updated successfully'], 200);
+            $newVersionId = $this->supportModel->updateArticle($articleId, $categoryId, $title, $description, $detailedDescription, $imgSrc);
+            if ($newVersionId) {
+                return ResponseHandler::sendResponse('success', ['message' => 'Article updated successfully', 'versionID' => $newVersionId], 200);
             } else {
                 return ResponseHandler::sendResponse('error', ['message' => 'Failed to update article'], 500);
             }
@@ -239,9 +238,9 @@ class SupportController
     public function archiveArticle($articleId)
     {
         try {
-            $result = $this->supportModel->archiveArticle($articleId);
-            if ($result) {
-                return ResponseHandler::sendResponse('success', ['message' => 'Article archived successfully'], 200);
+            $newVersionId = $this->supportModel->archiveArticle($articleId);
+            if ($newVersionId) {
+                return ResponseHandler::sendResponse('success', ['message' => 'Article archived successfully', 'versionID' => $newVersionId], 200);
             } else {
                 return ResponseHandler::sendResponse('error', ['message' => 'Failed to archive article'], 500);
             }
@@ -254,9 +253,9 @@ class SupportController
     public function toggleArticleStaffOnly($articleId)
     {
         try {
-            $result = $this->supportModel->toggleArticleStaffOnly($articleId);
-            if ($result) {
-                return ResponseHandler::sendResponse('success', ['message' => 'Article marked as staff-only successfully'], 200);
+            $newVersionId = $this->supportModel->toggleArticleStaffOnly($articleId);
+            if ($newVersionId) {
+                return ResponseHandler::sendResponse('success', ['message' => 'Article marked as staff-only successfully', 'versionID' => $newVersionId], 200);
             } else {
                 return ResponseHandler::sendResponse('error', ['message' => 'Failed to mark article as staff-only'], 500);
             }
@@ -314,8 +313,13 @@ class SupportController
     public function fetchCategoryVersions($categoryId)
     {
         try {
-            $versions = $this->supportModel->fetchCategoryVersions($categoryId);
-            return ResponseHandler::sendResponse('success', ['versions' => $versions], 200);
+            // Fetch the current version and historical versions
+            $versionsData = $this->supportModel->fetchCategoryVersions($categoryId);
+            $currentVersion = $versionsData['currentVersion'];
+            $historicalVersions = $versionsData['historicalVersions'];
+
+            return ResponseHandler::sendResponse('success', ['currentVersion' => $currentVersion, 'versions' => $historicalVersions], 200);
+
         } catch (Exception $e) {
             $this->logger->log('error', 'fetch_category_versions_error', ['error' => $e->getMessage()]);
             return ResponseHandler::sendResponse('error', ['message' => 'Failed to fetch category versions'], 500);
@@ -323,6 +327,7 @@ class SupportController
     }
 
 
+
     public function fetchArticleActionLogs($articleId)
     {
         try {
diff --git a/public_html/index.php b/public_html/index.php
index bb3276e..ab7b6cf 100644
--- a/public_html/index.php
+++ b/public_html/index.php
@@ -400,7 +400,6 @@ $router->addDocumentation('/premium/steamExists/:steamId', 'GET', 'Checks if a s
 
 // if the user is authenticated, use that instance of the Router class and dispatch the incoming request
 
-
 // ## FOR SUPPORT.IMPERFECTGAMERS.ORG
 
 // Route to create a new category
@@ -661,7 +660,6 @@ $router->enforceParameters('/support/requests/:supportRequestId/priority', 'PUT'
 ]);
 $router->addDocumentation('/support/requests/:supportRequestId/priority', 'PUT', 'Updates the priority of a specific support request.');
 
-
 // Add a comment to a support request
 $router->add('/support/requests/:supportRequestId/comments', 'SupportRequestController@handleAddComment', 'POST');
 $router->enforceParameters('/support/requests/:supportRequestId/comments', 'POST', [
@@ -681,21 +679,43 @@ $router->addDocumentation('/support/requests/:supportRequestId', 'DELETE', 'Dele
 
 
 
+// $router->add('/admin/media', 'AdminMediaController@index', 'GET');
+// $router->add('/admin/media/upload', 'AdminMediaController@upload', 'POST');
+// $router->add('/admin/media/logs', 'AdminMediaController@logs', 'GET');
+// $router->add('/admin/media/view/{id}', 'AdminMediaController@viewMedia', 'GET');
+// $router->add('/admin/media/delete/{id}', 'AdminMediaController@deleteMedia', 'DELETE');
 
+$router->add('/media/upload', 'MediaController@createMedia', 'POST');
+$router->addDocumentation('/media/upload', 'POST', 'Uploads a new media file.');
 
+$router->add('/media/folder/create', 'MediaController@createFolder', 'POST');
+$router->addDocumentation('/media/folder/create', 'POST', 'Creates a new folder for organizing media files.');
 
+$router->add('/media/all', 'MediaController@getAllMedia', 'GET');
+$router->addDocumentation('/media/all', 'GET', 'Fetches all media files.');
 
+$router->add('/media/update', 'MediaController@updateMedia', 'POST');
+$router->addDocumentation('/media/update', 'POST', 'Updates an existing media file.');
 
+$router->add('/media/delete', 'MediaController@deleteMedia', 'POST');
+$router->addDocumentation('/media/delete', 'POST', 'Deletes a media file by moving it to a deleted folder.');
 
+$router->add('/media/single/:media_id', 'MediaController@getMediaById', 'GET');
+$router->addDocumentation('/media/single/:media_id', 'GET', 'Fetches details of a specific media file.');
 
+$router->add('/media/folder/fetch/:folder_id', 'MediaController@getFolderContents', 'GET');
+$router->addDocumentation('/media/folder/fetch/:folder_id', 'GET', 'Fetches all media files and subfolders within a specific folder.');
 
+$router->add('/media/top-level', 'MediaController@getTopLevelFoldersAndRootMedia', 'GET');
+$router->addDocumentation('/media/top-level', 'GET', 'Fetches the top-level folders and media items in the root directory.');
 
+$router->add('/media/logs', 'MediaController@getMediaLogs', 'GET');
+$router->addDocumentation('/media/logs', 'GET', 'Fetches logs for media actions.');
 
 
-
-
-
-
+ // Routes for folders
+// $router->add('/media/folder/create', 'MediaController@createFolder', 'POST');
+// $router->addDocumentation('/media/folder/create', 'POST', 'Creates a new media folder.');
 
 
 
